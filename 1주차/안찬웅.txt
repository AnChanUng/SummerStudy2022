# [실습1C-2] 세 정수를 입력받아 중앙값 구하기

def med3(a, b, c):
    """a,b,c의 중앙값을 구하여 반환"""
    if a >= b:
        if b >= c: # a>=b>=c
          return b 
        elif a <= c: # c>=a>=b
          return a 
        else:      # c>=b>=a
          return c 
    elif a > c:    # a>c>b 
        return a
    elif b > c:    # b>c>a
        return c
    else:          # b>a>c
        return b

print('세 정수의 중앙값을 구합니다.')
a = int(input('정수 a의 값을 입력하세요.: '))
b = int(input('정수 b의 값을 입력하세요.: '))
c = int(input('정수 c의 값을 입력하세요.: '))

print(f'중앙값은 {med3(a,b,c)}입니다.')

# [실습1-10] a부터 b까지 정수의 합 구하기

print('a부터 b까지 정수의 합을 구합니다.')
a = int(input('정수 a를 입력하세요.: '))
b = int(input('정수 b를 입력하세요.: '))

if a > b:
    a, b = b, a #오름차순으로 정렬

sum = 0
for i in range(a, b + 1):
    if i < b:
        print(f'{i} + ', end='')
    else:
        print(f'{i} = ', end='')
    sum += i

print(sum)

# [실습1-21] 구구단 곱셈표 출력하기

print('-' * 27)
for i in range(1, 18):                # 행
    for j in range(1, 10):            # 열
        print(f'{i * j:3}', end='')   
    print()                           # 행 변경
print('-' * 27)


# [실습1-23] 오른쪽 아래가 직각인 이등변 삼각형 * 출력하기 

print('오른쪽 아래가 직각인 이등변 삼각형을 출력합니다. ')
n = int(input('짧은 변의 길이를 입력하세요.: '))

for i in range(n):
    for _ in range(n - i - 1): # 공백을 출력
        print(' ', end='')
    for _ in range(i + 1):     # *을 출력
        print('*', end='')
    print()

7/6 (수)

77p 
# [실습2-2] 시퀀스 원소의 최대값 출력하기

from typing import Any, Sequence

def max_of(a: Sequence) -> Any:
    """시퀀스형 a 원소의 최대값을 반환"""
    maximum = a[0]
    for i in range(1, len(a)):
        if a[i] > maximum:
           maximum = a[i]
    return maximum

if __name__ == '__main__':
    print('배열의 최대값을 구합니다.')
    num = int(input('원소 수를 입력하세요.:'))
    x = [None] * num 

    for i in range(num):
        x[i] = int(input(f'x[{i}]값을 입력하세요.:'))

    print(f' 최대값은 {max_of(x)}입니다.')
82p 
# 각 배열 원소의 최대값을 구해서 출력하기

from max import max_of

t = (4, 7, 5.6, 2, 3,14, 1)
s = 'string'
a = ['DTS', 'AAC', 'FLAC']

print(f'{t}의 최대값은 {max_of(t)}입니다.')
print(f'{s}의 최대값은 {max_of(s)}입니다.')
print(f'{a}의 최대값은 {max_of(a)}입니다.')

85p
# [실습2C-3] 리스트의 모든 원소를 enumerate()함수로 스캔하기

x = ['John', 'George', 'Paul', 'Ringo']

for i, name in enumerate(x, 1):
    print(f'{i}번째 = {name}')
 
87p
# [실습2-6] 뮤터블 시퀀스 원소를 역순으로 정렬

from typing import Any, MutableSequence

def reverse_array(a: MutableSequence) -> None:
    """뮤터블 시퀀스 a의 원소를 역순으로 정렬"""
    n = len(a)
    for i in range(n // 2):
        a[i], a[n - i - 1] = a[n - i - 1], a[i] # 오름차순 정렬

if __name__ == '__main__':
    print('배열 원소를 역순으로 정렬합니다. ')
    nx = int(input('원소 수를 입력하세요.: '))
    x = [None] * nx   # 원소 수가 nx인 리스트를 생성

    for i in range(nx):
        x[i] = int(input(f'x[{i}]값을 입력하세요.: '))

    reverse_array(x)  # x를 역순으로 정렬

    print('배열 원소를 역순으로 정렬했습니다.')
    for i in range(nx):
        print(f'x[{i}] = {x[i]}')
 
94p
# [실습2-7[A][B]] 10진수 정숫값을 입력받아 2~36진수로 변환하여 출력하기

def card_conv(x: int, r: int) -> str:
    """정숫값 x를 r진수로 변환한 뒤 그 수를 나타내는 문자열을 반환"""

    d = ''             # 변환 후의 문자열
    dchar = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    n = len(str(x))    # 변환하기 전의 자릿수

    print(f'{r:2} | {x:{n}d}')
    while x > 0:
        print('  +' + (n + 2) * '-')
        if x // r:
            print(f'{r:2} | {x // r:{n}d} ... {x % r}')
        else:
            print(f'    {x // r:{n}d} ... {x % r}')
        d += dchar [x % r] # 해당하는 문자를 꺼내 결합
        x //= r

    return d[::-1]      # 역순으로 반환

if __name__== '__main__':
    print('10진수를 n진수로 변환합니다.')

    while True:
        while True:  # 음이 아닌 정수를 입력받음
            no = int(input('변환할 값으로 음이 아닌 정수를 입력하세요.: '))
            if no > 0:
                break
            
        while True : # 2~36진수의 정숫값을 입력받음
            cd = int(input('어떤 진수로 변환할까요?: '))
            if 2 <= cd <= 36:
                break

        print(f'{cd}진수로는 {card_conv(no, cd)}입니다.')

        retry = input("한 번 더 변환할까요?(Y: 예 / N = 아니요): ")
        if retry in {'N', 'n'}:
            break

104p
# [실습2-10] 1000이하의 소수를 나열하기(알고리즘 개선하기2)

counter = 0                    # 곱셈과 나눗셈을 합한 횟수
ptr = 0                        # 이미 찾은 소수의 개수
prime = [None] * 500           # 소수를 저장하는 배열

prime[ptr] = 2                 # 2는 소수               
ptr += 1

prime[ptr] = 3                 # 3은 소수
ptr += 1

for n in range(5, 1001, 2):    # 홀수만을 대상으로 설정
    i = 1   
    while prime[i] * prime[i] <= n:
        counter += 2
        if n % prime[i] == 0:  # 나누어 떨어지므로 소수가 아님
            break              # 반복 중단
        i += 1
    else:                      # 끝까지 나누어 떨어지지 않았다면
        prime[ptr] = n         # 소수로 배열에 등록
        ptr += 1
        counter += 1

for i in range(ptr):           # ptr의 소수를 출력
    print(prime[i])
print(f'곱셈과 나눗셈을 실행한 횟수: {counter}')
