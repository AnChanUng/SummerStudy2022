p.24 1C-2

def med3(a, b, c):
    if a>=b:
        if b>=c:
            return b # a>=b>=c
        elif a<=c:
            return a # c>=a>=b
        else:
            return c # a>=c>=b

    elif a>c: 
        return a # b>a>c
    elif b>c: 
        return c # b>c>a
    else: 
        return b # c>b>a

print('세 정수의 중앙값을 구합니다.')
a = int(input('정수 a의 값을 입력하세요: '))
b = int(input('정수 b의 값을 입력하세요: '))
c = int(input('정수 c의 값을 입력하세요: '))

print(f'중앙값은 {med3(a,b,c)}입니다.')




p.36 1-10

print('a부터 b까지 정수의 합을 구합니다.')
a = int(input('정수 a의 값을 입력하세요: '))
b = int(input('정수 b의 값을 입력하세요: '))

if a > b:
    a, b = b, a

sum = 0
for i in range(a, b+1):
    if i<b:
        print(f'{i}+',end='')
    else:
        print(f'{i}=',end='')
    sum += i
print(sum)




p.52 1-21
 
print('-'*27)
for i in range(1, 10): 
    for j in range(1, 10): 
        print(f'{i*j:3}', end='') 
    print() 
print('-'*27)




p.55 1-23

print('오른쪽 아래가 직각인 이등변 삼각형을 출력합니다.')
n = int(input('짧은 변의 길이를 입력하세요: '))

for i in range(n): 
    for _ in range(n-i-1): 
        print(' ', end='')
    for _ in range(i+1): 
        print('*', end='')
    print()

#p.77 2-2
from typing import Any, Sequence

def max_of(a:Sequence) -> Any:

    maximum = a[0]
    for i in range(1,len(a)):
        if a[i] > maximum:
            maximum = a[i]
    return maximum

if __name__=='__main__':
    print('배열의 최댓값을 구합니다.')
    num = int(input('원소 수를 입력하세요.:'))
    x = [None]*num

    for i in range(num):
        x[i] = int(input(f'x[{i}]값을 입력하세요.:'))

    print(f'최댓값은 {max_of(x)}입니다.')
    
    
#p.82 2-5
from max import max_of

t= (4,7,5.6,2,3.14,1)
s='string'
a=['DTS','AAC','FLAC']

print(f'{t}의 최댓값은 {max_of(t)}입니다.')
print(f'{s}의 최댓값은 {max_of(s)}입니다.')
print(f'{a}의 최댓값은 {max_of(a)}입니다.')


#p.85 2C-3
x=['John','George','Paul','Ringo']

for i, name in enumerate(x,1):
    print(f'{i}번째={name}')
    
#p.87 2-6
from typing import Any, MutableSequence

def reverse_array(a:MutableSequence)->None:
    """뮤터블 시퀀스 a의 원소를 역순으로 정렬"""
    n=len(a)
    for i in range(n//2):
        a[i],a[n-i-1]=a[n-i-1],a[i]
        
if __name__=='__main__':
    print('배열 원소를 역순으로 정렬합니다.')
    nx= int(input('원소 수를 입력하세요.:'))
    x= [None]*nx
    
    for i in range(nx):
        x[i] = int(input(f'x[{i}]값을 입력하세요.:'))
        
    reverse_array(x)
    
    print('배열 원소를 역순으로 정렬했습니다.')
    for i in range(nx):
        print(f'x[{i}]={x[i]}')
        
#p.94        
def card_conV(x:int,r:int)->str:
    """정숫값 x를 r진수로 변환한 뒤 그 수를 나타내는 문자열을 반환"""
    
    d=''
    dchar = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    n=len(str(x))
    
    print(f'{r:2}|{x:{n}d}')
    while x>0:
        print(' +'+(n+2)*'-')
        if x//r:
            print(f'{r:2}|{x//r:{n}d} ...{x%r}')
        else:
            print(f'   {x//r:{n}d}...{x%r}')
        d+=dchar[x%r]
        x//=r
    return d[::-1]



#p.104 2-10
counter=0
ptr=0
prime=[None]*500

prime[ptr]=2
ptr+=1

for n in range(5,1001,2):
    i=1
    while prime[i]*prime[i]<=n:
        counter +=2
        if n%prime[i]==0:
            break
        i +=1
    else:
        prime[ptr]=n
        ptr+=1
        counter+=1
for i in range(ptr):
    print(prime[i])
print(f'곱셈과 나눗셈을 실행한 횟수:{counter}')