-7/4(월)
p.24 [실습 1C-2]
def med3(a, b, c):
    if a>=b: # a가 b보다 크거나 같다
        if b>=c: return b # a>=b>=c
        elif a<=c: return a # c>=a>=b
        else: return c # a>=c>=b

    elif a>c: return a # b>a>c
    elif b>c: return c # b>c>a
    else: return b # c>b>a

print('세 정수의 중앙값을 구합니다.')
a = int(input('정수 a의 값을 입력하세요: '))
b = int(input('정수 b의 값을 입력하세요: '))
c = int(input('정수 c의 값을 입력하세요: '))

print(f'중앙값은 {med3(a,b,c)}입니다.')


p.36 [실습1-10]
print('a부터 b까지 정수의 합을 구합니다.')
a = int(input('정수 a의 값을 입력하세요: '))
b = int(input('정수 b의 값을 입력하세요: '))

if a > b: # a가 b보다 크면
    a, b = b, a # a와 b를 바꾼다

sum = 0 # 초기화
for i in range(a, b): # a~b-1까지는 더하기 출력
    print(f'{i} + ', end='')
    sum+=i # a~b-1까지 총합
print(f'{b} = ', end='') # b는 = 출력
sum += b # a~b까지의 총합

print(sum)


p.52 [실습1-21]
print('-'*27)
for i in range(1, 10): # 1단~9단
    for j in range(1, 10): # 1행~9행
        print(f'{i*j:3}', end='') # 세자리칸에 수는 왼쪽 정렬
    print() # 한 단이 끝나면 줄바꿈
print('-'*27)


p.55 [실습1-23]
print('오른쪽 아래가 직각인 이등변 삼각형을 출력합니다.')
n = int(input('짧은 변의 길이를 입력하세요: '))

for i in range(n): # 0~4번 반복
    for _ in range(n-i-1): #공백은 4부터 1이 됨
        print(' ', end='')
    for _ in range(i+1): # 별은 1부터 5가 됨
        print('*', end='')
    print()




-7/6(수)
p.77
[max.py]
from typing import Any, Sequence # 다른 프로그램에서도 사용할 수 있는 함수 만들기

def max_of(a: Sequence) -> Any: # 시퀀스 객체를 매개변수로 받는다.
    maximum = a[0] # 최댓값을 배열의 첫 번째 요소로 지정한다. 
    for i in range(1,len(a)): # 인덱스 1번부터 인덱스 마지막 번호까지 돌면서 최댓값 찾기
        if a[i]>maximum: # 더 큰 값을 maximum 변수에 대입
            maximum = a[i]

    return maximum # 최댓값 반환

if __name__ == '__main__': # 직접 프로그램을 실행시키는 경우
    print('배열의 최댓값을 구합니다.')
    num = int(input('원소 수를 입력하시오: '))
    x = [None]* num # 원소 수 만큼 배열 공간을 만듦

    for i in range(num): # 배열 안에 요소를 입력받는다.
        x[i] = int(input(f'x[{i}]값을 입력: '))

    print(f'최댓값은 {max_of(x)}') # 함수를 이용하여 최댓값을 구한다.
    
    
p.82
from max import max_of # max 파일에서 max_of 함수를 이용

t = (4,7,5.6,2,3.14,1) # 튜플
s='string' # 문자열
a=['DTS','AAC', 'FLAC'] # 리스트
 
print(f'{t}의 최댓값은 {max_of(t)}') # 튜플 내에서 가장 큰 수
print(f'{s}의 최댓값은 {max_of(s)}') # 문자열 내에서 가장 뒷 순서 알파벳
print(f'{a}의 최댓값은 {max_of(a)}') # 가장 뒷 순서 알파벳이 있는 요소


p.85 [2C-3]
X=['A', 'B', 'C', 'D'] # 4개의 요소가 있는 리스트

for i, name in enumerate(X, 1): # 인덱스와 값을 출력해주는 enumerate 함수 사용. 인덱스의 첫 번째 번호는 1부터 시작
    print(f'{i}번째={name}')
    
    
p.87
from typing import Any, MutableSequence # 변경가능한 원소를 매개변수로 받는 함수 만들기

def reverse_array(a: MutableSequence) -> None: 
    n = len(a) # 배열의 요소 개수를 저장
    for i in range(n//2): # 전체 요소를 2로 나눈 몫 값
        a[i], a[n-i-1] = a[n-i-1], a[i] # 앞 순서 값과 뒷 순서 값을 바꿈

if __name__ == '__main__':
    print('원소를 역순으로 정렬한다.')
    nx = int(input('원소 수를 입력하세요: ')) # 원소 수
    x = [None]*nx # 원소 수 만큼 배열 공간을 생성

    for i in range(nx): # 원소 수 만큼 값을 입력받는다.
        x[i] = int(input(f'x[{i}]값을 입력하세요: '))

    reverse_array(x) # 역순 정렬 함수 실행

    print('배열을 역순으로 정렬했습니다.')
    for i, name in enumerate(x, 1): # 인덱스와 값을 출력
        print(f'x[{i}] = {name}')


p.94
def card_conv(x: int, r: int) -> str: # x는 변환할 정수, r은 변환할 진수. 문자형으로 반환하는 함수

    d='' # 변환한 문자열을 저장
    dchar= '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' # 32진수
    n = len(str(x)) # 변환하기 전의 자릿수

    print(f'{r:2} | {x:{n}d}') # x를 r로 나누기
    while x>0: # x가 0보다 큰 경우 계속 나누기
        print('   +'+(n+2)*'-') 
        if x//r: # x를 r진수로 나눈 몫이 있으면
            print(f'{r:2} | {x//r:{n}d} ... {x % r}') # 몫과 나머지를 표시
        else: # 없는 경우
            print(f'      {x//r:{n}d} ... {x % r}') # 나머지만 표시
        d += dchar[x % r] # 나눈 나머지 수를 인덱스로 한 요소를 변환 후 문자열에 저장
        x //= r # x를 r로 나눈 몫이 x가 됨

    return d[::-1] # 반환할 때는 문자열을 반대부터 출력함



p.104
counter = 0
ptr = 0 # 이미 찾은 소수의 개수
prime = [None]*500 # 소수를 저장하는 리스트

prime[ptr] = 2 # 0 인덱스는 소수 2
ptr+=1 # 값 1 증가

prime[ptr] = 3 # 1 인덱스는 소수 3
ptr+=1 # 값 1 증가

for n in range(5, 1001, 2): # 5부터 1000까지 홀수만을 대상으로 탐색
    i=1 # 소수 3부터 
    while prime[i]*prime[i]<=n: # 소수의 제곱근이 n 이하일 경우만 반복
        counter+=2 # 제곱근을 사용하기 때문에 카운터 2 증가시킴
        if n % prime[i] == 0: # 소수가 아닌 경우 다음 수로 넘어가기
            break
        i+=1 # 다음 인덱스
    else:
        prime[ptr] = n # 소수인 경우 소수 리스트에 저장
        ptr+=1 
        counter+=1

for i in range(ptr):
    print(prime[i])
print(f'곱셈과 나눗셈을 실행한 횟수: {counter}')
